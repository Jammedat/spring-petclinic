pipeline {
    agent {
    docker {
      image 'maven:3.9.6-eclipse-temurin-17'
      args '--user root -v /var/run/docker.sock:/var/run/docker.sock'
    }
  }

    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'main', changelog: false, poll: false, url: 'https://github.com/Jammedat/spring-petclinic'

            }
        }

        stage('Compile') {
            steps {
                sh 'mvn clean compile'
            }
        }

        stage('Sonarqube Analysis') {
            environment {
                SONAR_URL = 'http://172.191.52.157:9000'
            }
            steps {
                withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
                    sh 'mvn sonar:sonar -Dsonar.host.url=${SONAR_URL} -Dsonar.login=${SONAR_AUTH_TOKEN}'

                }
            }
        }

        stage('Build Application') {
            steps {
                sh 'mvn clean package'
            }
        }

        stage('Build and Push Docker Image') {
            environment {
               DOCKER_IMAGE = "susilkhadka503302/spring-petclinic:${BUILD_NUMBER}"
               
               REGISTRY_CREDENTIALS = credentials('docker-cred')
             }
            steps {
               script {
                   sh 'docker build -t ${DOCKER_IMAGE} .'
                   def dockerImage = docker.image("${DOCKER_IMAGE}")
                   docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                       dockerImage.push()
                   }
                }
            }
        }

        stage('Docker deploy to container') {
            steps {
                script {
                    sh 'docker pull ${DOCKER_IMAGE}'
                    sh 'docker stop spring-petclinic || true'
                    sh 'docker rm spring-petclinic || true'
                    sh 'docker run -d --name spring-petclinic -p 8070:8080 ${DOCKER_IMAGE}'
                }
            }
        }


    }

}
